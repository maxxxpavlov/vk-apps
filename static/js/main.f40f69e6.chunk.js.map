{"version":3,"sources":["App.js","sw.js","index.js"],"names":["connect","subscribe","e","detail","type","data","send","v","access_token","add_to_news","link_text","link_url","console","log","axios","post","url","then","res","App","activePanel","id","size","onClick","this","getPermissions","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"iPASAA,IAAQC,WAAU,SAACC,GACf,GAAsB,gCAAlBA,EAAEC,OAAOC,KAAwC,CAAC,IAC1CC,EAASH,EAAEC,OAAXE,KACRL,IAAQM,KAAK,wBACT,CACI,OAAU,+BACV,OAAU,CACNC,EAAG,QACHC,aAAcH,EAAKG,aACnBC,YAAa,EACbC,UAAW,SACXC,SAAU,gCAGtBC,QAAQC,IAAIR,GAGM,gCAAlBH,EAAEC,OAAOC,OACTQ,QAAQC,IAAIX,GACZY,IAAMC,KAAN,UAvBW,0BAuBX,gBAAwCb,EAAEC,OAAOa,KAC5CC,MAAK,SAAAC,W,IA8BHC,E,YAvBX,aAAe,uE,8EAIXnB,IAAQM,KAAK,uBAAwB,CAAE,OAAU,QAAS,MAAS,c,+BAInE,OACI,kBAAC,IAAD,CAAMc,YAAY,aACd,kBAAC,IAAD,CAAOC,GAAG,aACN,kBAAC,IAAD,oGACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,KAAK,KAAKC,QAASC,KAAKC,gBAAhC,+H,GAfVC,IAAMC,WC6BJC,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DC5DhChC,IAAQM,KAAK,eAAgB,IAK7B2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f40f69e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport { CellButton, Cell, Div, FormLayout, Group, InfoRow, Input, List, Panel, PanelHeader, Spinner, View, Button } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport axios from 'axios';\r\nconst SERVER_API = 'https://api.lildiary.ru';\r\n\r\n\r\n\r\nconnect.subscribe((e) => {\r\n    if (e.detail.type === 'VKWebAppAccessTokenReceived') {\r\n        const { data } = e.detail;\r\n        connect.send(\"VKWebAppCallAPIMethod\",\r\n            {\r\n                \"method\": \"stories.getPhotoUploadServer\",\r\n                \"params\": {\r\n                    v: \"5.102\",\r\n                    access_token: data.access_token,\r\n                    add_to_news: 1,\r\n                    link_text: 'signup',\r\n                    link_url: 'https://vk.com/lildiarybot'\r\n                }\r\n            });\r\n        console.log(data)\r\n\r\n    }\r\n    if (e.detail.type === 'VKWebAppAccessTokenReceived') {\r\n        console.log(e)\r\n        axios.post(`${SERVER_API}/app/stories`, e.detail.url)\r\n            .then(res => {\r\n\r\n            })\r\n    }\r\n});\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getPermissions() {\r\n        connect.send(\"VKWebAppGetAuthToken\", { \"app_id\": 7183418, \"scope\": \"stories\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View activePanel=\"mainPanel\">\r\n                <Panel id=\"mainPanel\">\r\n                    <PanelHeader>Добавить историю</PanelHeader>\r\n                    <Group>\r\n                        <FormLayout>\r\n                            <Button size=\"xl\" onClick={this.getPermissions}>Опубликовать историю</Button>\r\n                        </FormLayout>\r\n                    </Group>\r\n                </Panel>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nfunction registerValidSW(swUrl) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\r\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\r\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\r\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\r\n\t\t});\r\n}\r\n\r\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n\t// [::1] is the IPv6 localhost address.\r\n\twindow.location.hostname === '[::1]' ||\r\n\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\r\n\r\nexport default function register() {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not local host. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './sw';\r\n\r\n\r\n// Init VK App\r\nconnect.send('VKWebAppInit', {});\r\n\r\n// Service Worker For Cache\r\n// registerServiceWorker();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}